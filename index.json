[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/entity.js",
    "content": "/** @ignore */\nconst { invoke } = require('./utilities.js')\n\n/**\n * Entity class used for storing components.\n *\n * @class      Entity (name)\n */\nclass Entity {\n\t/**\n\t * Do not construct an Entity yourself - use the entity() method in World instead.\n\t * Also, do not shallow/deep copy entity objects, only pass around references.\n\t *\n\t * @private\n\t *\n\t * @param {World}  world - The world\n\t * @param {number} id    - The identifier\n\t */\n\tconstructor(world, id) {\n\t\t/** @ignore */\n\t\tthis.world = world\n\n\t\t/** @ignore */\n\t\tthis._id = id\n\n\t\t/** @ignore */\n\t\tthis.data = {}\n\t}\n\n\t/**\n\t * Return the entity ID.\n\t *\n\t * @return {number} Integer entity ID\n\t */\n\tget id() {\n\t\treturn this._id\n\t}\n\n\t/**\n\t * ID is read-only, attempting to set it will throw an error.\n\t *\n\t * @private\n\t *\n\t * @throws {Error} Cannot set entity id\n\t */\n\tset id(id) {\n\t\tthrow new Error('Cannot set entity id')\n\t}\n\n\t/**\n\t * Returns true if the entity has ALL of the specified component names.\n\t * Additional components that the entity has, which are not specified in has(), will be ignored.\n\t * If no component names are specified, this method returns true.\n\t *\n\t * @example\n\t * if (entity.has('position', 'velocity')) {...}\n\t *\n\t * @param {...string} [components] - The component names to check for\n\t *\n\t * @return {boolean} true or false\n\t */\n\thas(...components) {\n\t\treturn components.every(name => name in this.data)\n\t}\n\n\t/**\n\t * Returns a component by name, or undefined if it doesn't exist\n\t *\n\t * @example\n\t * let position = entity.get('position')\n\t *\n\t * @param {string} component - The component name to get\n\t *\n\t * @return {Object} The component if defined, otherwise undefined\n\t */\n\tget(component) {\n\t\treturn this.data[component]\n\t}\n\n\t/**\n\t * Returns a component by name (automatically created if it doesn't exist)\n\t *\n\t * @example\n\t * let position = entity.access('position', 3, 4)\n\t *\n\t * @param {string}    component - The component name to create/get\n\t * @param {...Object} [args]    - The arguments to forward to create the new component, only if it doesn't exist.\n\t *\n\t * @return {Object} Always returns either the existing component, or the newly created one.\n\t */\n\taccess(component, ...args) {\n\t\tif (!this.has(component)) {\n\t\t\tthis.set(component, ...args)\n\t\t}\n\t\treturn this.data[component]\n\t}\n\n\t/**\n\t * Adds a new component, or re-creates and overwrites an existing component\n\t *\n\t * @example\n\t * entity.set('position', 1, 2)\n\t *\n\t * @example\n\t * entity.set('anonymousComponent', { keys: 'values' })\n\t *\n\t * @example\n\t * entity.set('anotherAnonymousComponent', 'Any type of any value')\n\t *\n\t * @param {string}    component - The component name to create. If there is a registered component for this name,\n\t * then its constructor will be called with (...args) and an object of that type will be created. The parent\n\t * entity reference gets injected into registered components after they are constructed. The onCreate method\n\t * gets called after the component is added to the entity, and after the entity is injected. This method\n\t * also gets passed the same parameters.\n\t * @param {...Object} [args]    - The arguments to forward to the registered component type. If the component type is\n\t * registered, then only the first additional argument will be used as the value of the entire component.\n\t *\n\t * @return {Object} The original entity that set() was called on, so that operations can be chained.\n\t */\n\tset(component, ...args) {\n\t\tif (this.valid() && component in this.world.components) {\n\t\t\t// Create component and store in entity\n\t\t\tthis.data[component] = new this.world.components[component](...args)\n\t\t\t\n\t\t\t// Inject parent entity into component\n\t\t\tthis.data[component].entity = this\n\t\t} else if (args.length > 0) {\n\t\t\t// Use first argument as component value\n\t\t\tthis.data[component] = args[0]\n\t\t} else {\n\t\t\t// Make an empty object\n\t\t\tthis.data[component] = {}\n\t\t}\n\n\t\t// Update the index with this new component\n\t\tif (this.valid()) {\n\t\t\tthis.world.index.add(this, component)\n\t\t}\n\n\t\t// Call custom onCreate to initialize component, and any additional arguments passed into set()\n\t\tinvoke(this.data[component], 'onCreate', ...args)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets a component value directly. The onCreate method is not called, and it is expected that you pass an already initialized component.\n\t *\n\t * @example\n\t * entity.set('position', position)\n\t *\n\t * @param {string} component - The component name to set.\n\t * @param {Object} value - Should be a previous component instance, or whatever is expected for the component name.\n\t *\n\t * @return {Object} The original entity that set() was called on, so that operations can be chained.\n\t */\n\tsetRaw(component, value) {\n\t\t// Directly set value\n\t\tthis.data[component] = value\n\n\t\t// Update the index with this new component\n\t\tif (this.valid()) {\n\t\t\tthis.world.index.add(this, component)\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Updates component data from an object or other component. Similar to access() with a shallow merge applied after.\n\t *\n\t * @example\n\t * entity.update('position', { x: 1, y: 2 })\n\t *\n\t * @param {string} component - The component name to update\n\t * @param {Object} data      - The object or other component to merge into the specified component.\n\t *\n\t * @return {Object} The original entity that update() was called on, so that operations can be chained.\n\t */\n\tupdate(component, data) {\n\t\tlet comp = this.access(component)\n\n\t\t// Shallow set keys of the component\n\t\tfor (let key in data) {\n\t\t\tcomp[key] = data[key]\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Removes a component from the entity - has no effect when it doesn't exist.\n\t * Can specify an onRemove() method in your component which gets called before it is removed.\n\t * If nothing is specified, then nothing will be removed. Use removeAll() to remove all components.\n\t *\n\t * @example\n\t * entity.remove('position')\n\t *\n\t * @param {...string} [components] - The component names to remove from the entity.\n\t *\n\t * @return {Object} The original entity that remove() was called on, so that operations can be chained.\n\t */\n\tremove(...components) {\n\t\tfor (let component of components) {\n\t\t\tif (component in this.data) {\n\n\t\t\t\t// Call custom onRemove\n\t\t\t\tinvoke(this.data[component], 'onRemove')\n\n\t\t\t\t// Remove from index\n\t\t\t\tif (this.valid()) {\n\t\t\t\t\tthis.world.index.remove(this, component)\n\t\t\t\t}\n\n\t\t\t\t// Remove from entity\n\t\t\t\tdelete this.data[component]\n\t\t\t}\n\t\t}\n\t\treturn this\n\t}\n\n\t// Remove all components\n\n\t/**\n\t * Removes all components from the entity.\n\t *\n\t * @example\n\t * entity.removeAll()\n\t *\n\t * @return {Object} The original entity that removeAll() was called on, so that operations can be chained.\n\t */\n\tremoveAll() {\n\t\tthis.remove(...this.components)\n\n\t\tif (this.components.length > 0) {\n\t\t\tthrow new Error('Failed to remove all components. Components must have been added during the removeAll().')\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Remove this entity and all of its components from the world. After an entity is destroyed, the object should be discarded,\n\t * and it is recommended to avoid re-using it.\n\t *\n\t * @example\n\t * entity.destroy()\n\t */\n\tdestroy() {\n\t\tthis.removeAll()\n\n\t\tif (this.valid()) {\n\t\t\t// Remove from world\n\t\t\tthis.world.entities.delete(this._id)\n\t\t\tthis._id = undefined\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array of component names this entity currently has.\n\t *\n\t * @return {Array<String>} Array of component names.\n\t */\n\tget components() {\n\t\treturn Object.keys(this.data)\n\t}\n\n\t/** @ignore */\n\tset components(c) {\n\t\tthrow new Error('Cannot set components in this way. See entity.set().')\n\t}\n\n\t/**\n\t * Returns true if this is a valid, existing, and usable entity, which is attached to a world.\n\t *\n\t * @example\n\t * if (entity.valid()) {...}\n\t *\n\t * @return {boolean} true or false\n\t */\n\tvalid() {\n\t\t// Note: No need to actually look in the world for the ID, if entities are only ever copied by reference.\n\t\t// If entities are ever deep/shallow copied, this function will need to check this to be more robust.\n\t\treturn this.world && this._id !== undefined\n\t}\n\n\t/**\n\t * Returns unique entity ID as a string.\n\t *\n\t * @example\n\t * let entityId = entity.toString()\n\t *\n\t * @return {string} String representation of the entity ID.\n\t */\n\ttoString() {\n\t\treturn String(this._id)\n\t}\n\n\t/**\n\t * Serializes entire entity and components to JSON.\n\t * Note: Defining toJSON methods in your components will override the built-in behavior.\n\t *\n\t * @example\n\t * let serializedEntity = entity.toJSON()\n\t *\n\t * @return {string} JSON encoded string\n\t */\n\ttoJSON() {\n\t\treturn JSON.stringify(this.data)\n\t}\n\n\t/**\n\t * Deserializes data from JSON, creating new components and overwriting existing components.\n\t * Note: Defining fromJSON methods in your components will override the built-in behavior.\n\t *\n\t * @example\n\t * entity.fromJSON(serializedEntity)\n\t *\n\t * @param {string} data - A JSON string containing component data to parse, and store in this entity.\n\t *\n\t * @return {Object} The original entity that fromJSON() was called on, so that operations can be chained.\n\t */\n\tfromJSON(data) {\n\t\tlet parsed = JSON.parse(data)\n\t\tfor (let name in parsed) {\n\t\t\tlet comp = this.access(name)\n\n\t\t\t// Either call custom method or copy all properties\n\t\t\tif (typeof comp.fromJSON === 'function') {\n\t\t\t\tcomp.fromJSON(parsed[name])\n\t\t\t} else {\n\t\t\t\tthis.update(name, parsed[name])\n\t\t\t}\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Attaches a currently detached entity back to a world.\n\t * Note: Do not use detached entities, get() may be safe, but avoid calling other methods\n\t * Note: The ID will be reassigned, so do not rely on this\n\t *\n\t * @example\n\t * entity.attach(world)\n\t *\n\t * @param {World} world - The world to attach this entity to\n\t */\n\tattach(world) {\n\t\tif (world && !this.valid()) {\n\t\t\t// Assign new id, and reattach to world\n\t\t\tthis.world = world\n\t\t\tthis._id = this.world.idCounter++\n\t\t\tthis.world.entities.set(this._id, this)\n\t\t\tthis.world.index.add(this, ...this.components)\n\t\t}\n\t}\n\n\t/**\n\t * Removes this entity from the current world, without removing any components or data.\n\t * It can be re-attached to another world (or the same world), using the attach() method.\n\t * Note: Do not use detached entities, get() may be safe, but avoid calling other methods\n\t * Note: The ID will be reassigned, so do not rely on this\n\t *\n\t * @example\n\t * entity.detach()\n\t */\n\tdetach() {\n\t\tif (this.valid()) {\n\t\t\t// Remove from current world\n\t\t\tthis.world.index.remove(this, ...this.components)\n\t\t\tthis.world.entities.delete(this._id)\n\t\t\tthis._id = undefined\n\t\t\tthis.world = undefined\n\t\t}\n\t}\n}\n\nexports.Entity = Entity\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "invoke",
    "memberof": "src/entity.js",
    "static": true,
    "longname": "src/entity.js~invoke",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Entity",
    "memberof": "src/entity.js",
    "static": true,
    "longname": "src/entity.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/entity.js",
    "importStyle": null,
    "description": "Entity class used for storing components.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "     Entity (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#constructor",
    "access": "private",
    "description": "Do not construct an Entity yourself - use the entity() method in World instead.\nAlso, do not shallow/deep copy entity objects, only pass around references.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "world",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#world",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_id",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#_id",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "data",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#data",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "id",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#id",
    "access": "public",
    "description": "Return the entity ID.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Integer entity ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "set",
    "name": "id",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#id",
    "access": "private",
    "description": "ID is read-only, attempting to set it will throw an error.",
    "lineNumber": 46,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Cannot set entity id"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "has",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#has",
    "access": "public",
    "description": "Returns true if the entity has ALL of the specified component names.\nAdditional components that the entity has, which are not specified in has(), will be ignored.\nIf no component names are specified, this method returns true.",
    "examples": [
      "if (entity.has('position', 'velocity')) {...}"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": true,
        "name": "components",
        "description": "The component names to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "get",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#get",
    "access": "public",
    "description": "Returns a component by name, or undefined if it doesn't exist",
    "examples": [
      "let position = entity.get('position')"
    ],
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to get"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The component if defined, otherwise undefined"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "access",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#access",
    "access": "public",
    "description": "Returns a component by name (automatically created if it doesn't exist)",
    "examples": [
      "let position = entity.access('position', 3, 4)"
    ],
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to create/get"
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to create the new component, only if it doesn't exist."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Always returns either the existing component, or the newly created one."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "set",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#set",
    "access": "public",
    "description": "Adds a new component, or re-creates and overwrites an existing component",
    "examples": [
      "entity.set('position', 1, 2)",
      "entity.set('anonymousComponent', { keys: 'values' })",
      "entity.set('anotherAnonymousComponent', 'Any type of any value')"
    ],
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to create. If there is a registered component for this name,\nthen its constructor will be called with (...args) and an object of that type will be created. The parent\nentity reference gets injected into registered components after they are constructed. The onCreate method\ngets called after the component is added to the entity, and after the entity is injected. This method\nalso gets passed the same parameters."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to the registered component type. If the component type is\nregistered, then only the first additional argument will be used as the value of the entire component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that set() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setRaw",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#setRaw",
    "access": "public",
    "description": "Sets a component value directly. The onCreate method is not called, and it is expected that you pass an already initialized component.",
    "examples": [
      "entity.set('position', position)"
    ],
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to set."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Should be a previous component instance, or whatever is expected for the component name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that set() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "update",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#update",
    "access": "public",
    "description": "Updates component data from an object or other component. Similar to access() with a shallow merge applied after.",
    "examples": [
      "entity.update('position', { x: 1, y: 2 })"
    ],
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to update"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The object or other component to merge into the specified component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that update() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "remove",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#remove",
    "access": "public",
    "description": "Removes a component from the entity - has no effect when it doesn't exist.\nCan specify an onRemove() method in your component which gets called before it is removed.\nIf nothing is specified, then nothing will be removed. Use removeAll() to remove all components.",
    "examples": [
      "entity.remove('position')"
    ],
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": true,
        "name": "components",
        "description": "The component names to remove from the entity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that remove() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "removeAll",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#removeAll",
    "access": "public",
    "description": "Removes all components from the entity.",
    "examples": [
      "entity.removeAll()"
    ],
    "lineNumber": 232,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that removeAll() was called on, so that operations can be chained."
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#destroy",
    "access": "public",
    "description": "Remove this entity and all of its components from the world. After an entity is destroyed, the object should be discarded,\nand it is recommended to avoid re-using it.",
    "examples": [
      "entity.destroy()"
    ],
    "lineNumber": 249,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "get",
    "name": "components",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#components",
    "access": "public",
    "description": "Returns an array of component names this entity currently has.",
    "lineNumber": 264,
    "return": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": "Array of component names."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "set",
    "name": "components",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#components",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "valid",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#valid",
    "access": "public",
    "description": "Returns true if this is a valid, existing, and usable entity, which is attached to a world.",
    "examples": [
      "if (entity.valid()) {...}"
    ],
    "lineNumber": 281,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false"
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "toString",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#toString",
    "access": "public",
    "description": "Returns unique entity ID as a string.",
    "examples": [
      "let entityId = entity.toString()"
    ],
    "lineNumber": 295,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation of the entity ID."
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#toJSON",
    "access": "public",
    "description": "Serializes entire entity and components to JSON.\nNote: Defining toJSON methods in your components will override the built-in behavior.",
    "examples": [
      "let serializedEntity = entity.toJSON()"
    ],
    "lineNumber": 308,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JSON encoded string"
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#fromJSON",
    "access": "public",
    "description": "Deserializes data from JSON, creating new components and overwriting existing components.\nNote: Defining fromJSON methods in your components will override the built-in behavior.",
    "examples": [
      "entity.fromJSON(serializedEntity)"
    ],
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A JSON string containing component data to parse, and store in this entity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that fromJSON() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "attach",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#attach",
    "access": "public",
    "description": "Attaches a currently detached entity back to a world.\nNote: Do not use detached entities, get() may be safe, but avoid calling other methods\nNote: The ID will be reassigned, so do not rely on this",
    "examples": [
      "entity.attach(world)"
    ],
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world to attach this entity to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "detach",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#detach",
    "access": "public",
    "description": "Removes this entity from the current world, without removing any components or data.\nIt can be re-attached to another world (or the same world), using the attach() method.\nNote: Do not use detached entities, get() may be safe, but avoid calling other methods\nNote: The ID will be reassigned, so do not rely on this",
    "examples": [
      "entity.detach()"
    ],
    "lineNumber": 367,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/memoized_query_index.js",
    "content": "/**\n * An alternative indexer class to SimpleIndex. This has true O(1) queries (when memoized), for the cost\n * of slower component add/remove operations. As more queries are made, the slower add/remove become.\n *\n * @class      MemoizedQueryIndex (name)\n */\nclass MemoizedQueryIndex {\n\tconstructor(world) {\n\t\tthis.world = world\n\t\tthis.clear()\n\t}\n\n\t// Removes everything from the index\n\tclear() {\n\t\tthis.index = {}\n\t}\n\n\t// Uses an existing index or builds a new index, to return entities with the specified components\n\t*query(...componentNames) {\n\t\t// Return all entities\n\t\tif (componentNames.length === 0) {\n\t\t\tyield* this.world.entities.values()\n\t\t\treturn\n\t\t}\n\n\t\t// Hash the component list\n\t\tlet hash = this.hashComponents(componentNames)\n\n\t\t// Return already existing index\n\t\tif (hash in this.index) {\n\t\t\tyield* this.index[hash].entities.values()\n\t\t\treturn\n\t\t}\n\n\t\t// Build new index for this component list\n\t\tyield* this.build(hash, componentNames).entities.values()\n\t}\n\n\t// Creates a hash from an array of component names\n\thashComponents(names) {\n\t\treturn JSON.stringify(names.sort())\n\t}\n\n\t// Builds an initial index for a set of components\n\t// These indexes are expected to be updated when doing entity/component operations\n\tbuild(hash, componentNames) {\n\t\tlet matchingEntities = new Map()\n\n\t\tfor (const [entityId, entity] of this.world.entities) {\n\t\t\t// Ensure entity contains all specified components\n\t\t\tif (entity.has(...componentNames)) {\n\t\t\t\t// Add entity to index\n\t\t\t\tmatchingEntities.set(entity.id, entity)\n\t\t\t}\n\t\t}\n\n\t\treturn this.index[hash] = {\n\t\t\tcomponents: new Set(componentNames),\n\t\t\tentities: matchingEntities\n\t\t}\n\t}\n\n\t// Must use all component names from entity\n\tadd(entity) {\n\t\tfor (let hash in this.index) {\n\t\t\tconst group = this.index[hash]\n\n\t\t\t// Check if the entity has all of the components of the index group\n\t\t\tif (entity.has(...group.components)) {\n\t\t\t\t// Add the entity\n\t\t\t\tgroup.entities.set(entity.id, entity)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove certain components from the index for an entity\n\tremove(entity, ...componentNames) {\n\t\tfor (let hash in this.index) {\n\t\t\tconst group = this.index[hash]\n\n\t\t\t// Check if index group has any of the components that the entity has\n\t\t\tif (componentNames.some(name => group.components.has(name))) {\n\t\t\t\t// Remove the entity\n\t\t\t\tgroup.entities.delete(entity.id)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexports.MemoizedQueryIndex = MemoizedQueryIndex\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/memoized_query_index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "MemoizedQueryIndex",
    "memberof": "src/memoized_query_index.js",
    "static": true,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/memoized_query_index.js",
    "importStyle": null,
    "description": "An alternative indexer class to SimpleIndex. This has true O(1) queries (when memoized), for the cost\nof slower component add/remove operations. As more queries are made, the slower add/remove become.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "     MemoizedQueryIndex (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "world",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#world",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "clear",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#clear",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "index",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#index",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "query",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#query",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "hashComponents",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#hashComponents",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "build",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#build",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "add",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#add",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "remove",
    "memberof": "src/memoized_query_index.js~MemoizedQueryIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/memoized_query_index.js~MemoizedQueryIndex#remove",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/simple_index.js",
    "content": "/**\n * @ignore\n * Returns index of smallest element\n */\nconst minIndexReducer = (minIndex, value, index, values) => (value < values[minIndex] ? index : minIndex)\n\n/**\n * The default indexer for World. Extremely fast component adding/removing, for the cost of slightly\n * slower entity querying performance.\n *\n * @class SimpleIndex (name)\n */\nclass SimpleIndex {\n\tconstructor(world) {\n\t\tthis.world = world\n\t\tthis.clear()\n\t}\n\n\t// Removes everything from the index\n\tclear() {\n\t\tthis.index = {}\n\t}\n\n\t// Returns an existing or new index\n\taccess(component) {\n\t\treturn this.index[component] || (this.index[component] = new Map())\n\t}\n\n\t// Uses an existing index or builds a new index, to return entities with the specified components\n\t*query(...componentNames) {\n\t\t// Return all entities\n\t\tif (componentNames.length === 0) {\n\t\t\tyield* this.world.entities.values()\n\t\t\treturn\n\t\t}\n\n\t\t// Get the index name with the least number of entities\n\t\tconst minCompIndex = componentNames\n\t\t\t.map(name => this.access(name).size)\n\t\t\t.reduce(minIndexReducer, 0)\n\t\tconst minComp = componentNames[minCompIndex]\n\n\t\t// Return matching entities\n\t\tfor (let entity of this.index[minComp].values()) {\n\t\t\tif (entity.has(...componentNames)) {\n\t\t\t\tyield entity\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add certain components with an entity to the index\n\tadd(entity, ...componentNames) {\n\t\tfor (let component of componentNames) {\n\t\t\tthis.access(component).set(entity.id, entity)\n\t\t}\n\t}\n\n\t// Remove certain components from the index for an entity\n\tremove(entity, ...componentNames) {\n\t\tfor (let component of componentNames) {\n\t\t\tthis.access(component).delete(entity.id)\n\t\t}\n\t}\n}\n\nexports.SimpleIndex = SimpleIndex\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/simple_index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "minIndexReducer",
    "memberof": "src/simple_index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/simple_index.js~minIndexReducer",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/simple_index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 5,
    "ignore": true,
    "params": [
      {
        "name": "minIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "SimpleIndex",
    "memberof": "src/simple_index.js",
    "static": true,
    "longname": "src/simple_index.js~SimpleIndex",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/simple_index.js",
    "importStyle": null,
    "description": "The default indexer for World. Extremely fast component adding/removing, for the cost of slightly\nslower entity querying performance.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SimpleIndex (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "world",
    "memberof": "src/simple_index.js~SimpleIndex",
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#world",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "clear",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#clear",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "index",
    "memberof": "src/simple_index.js~SimpleIndex",
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#index",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "access",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#access",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "query",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#query",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "add",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#add",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "remove",
    "memberof": "src/simple_index.js~SimpleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/simple_index.js~SimpleIndex#remove",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/utilities.js",
    "content": "/**\n * Utility function for invoking methods inside objects, binding \"this\" to the object.\n *\n * @ignore\n *\n * @param {Object}   object - The object\n * @param {Function} method - The method\n * @param {Array}    args   - The arguments\n *\n * @return {Object} Returns what the called method returns\n */\nfunction invoke(object, method, ...args) {\n\tif (object && typeof object[method] === 'function') {\n\t\treturn object[method].call(object, ...args)\n\t}\n}\n\n/**\n * Determines if function.\n *\n * @ignore\n */\nfunction isFunction(obj) {\n\treturn typeof obj === 'function'\n}\n\nexports.invoke = invoke\nexports.isFunction = isFunction\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "invoke",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~invoke",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/utilities.js",
    "importStyle": null,
    "description": "Utility function for invoking methods inside objects, binding \"this\" to the object.",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns what the called method returns"
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~isFunction",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/utilities.js",
    "importStyle": null,
    "description": "Determines if function.",
    "lineNumber": 23,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/world.js",
    "content": "/** @ignore */\nconst { invoke, isFunction } = require('./utilities.js')\n\n/** @ignore */\nconst { Entity } = require('./entity.js')\n\n/** @ignore */\nconst { SimpleIndex } = require('./simple_index.js')\n\n/**\n * Class for world.\n *\n * @class      World (name)\n */\nclass World {\n\t/**\n\t * Constructs an instance of the world.\n\t *\n\t * @param      {Function}  [indexer=SimpleIndex]  The indexer to use. Default is SimpleIndex. Can use MemoizedQueryIndex if better querying performance is needed, for increased component creation/removal costs.\n\t */\n\tconstructor(indexer = SimpleIndex) {\n\t\t/** @ignore */\n\t\tthis.systems = []\n\n\t\t/**\n\t\t * Maps entity IDs to entities\n\t\t * @ignore\n\t\t */\n\t\tthis.entities = new Map()\n\n\t\t/** @ignore */\n\t\tthis.components = {}\n\n\t\t/** @ignore */\n\t\tthis.entityTemplates = {}\n\n\t\t/** @ignore */\n\t\tthis.idCounter = 1\n\n\t\t/**\n\t\t * Maps entire queries to arrays of entities\n\t\t * @ignore\n\t\t */\n\t\tthis.index = new indexer(this)\n\n\t\t/**\n\t\t * Context information\n\t\t */\n\t\tthis.contextData = undefined\n\t\tthis.contextKey = undefined\n\t}\n\n\t/**\n\t * Removes all entities from the world.\n\t * Does not affect registered systems, components, or prototypes.\n\t *\n\t * @example\n\t * world.clear()\n\t */\n\tclear() {\n\t\t// Call onRemove on all components of all entities\n\t\tfor (const [entityId, entity] of this.entities) {\n\t\t\tfor (let componentName in entity.data) {\n\t\t\t\t// Get component, and call onRemove if it exists as a function\n\t\t\t\tlet component = entity.data[componentName]\n\t\t\t\tinvoke(component, 'onRemove')\n\t\t\t}\n\t\t}\n\n\t\t// Clear entities\n\t\tthis.entities = new Map()\n\t\tthis.index.clear()\n\t}\n\n\t/**\n\t * Registers a component type to the world. Components must be constructable. If the component has\n\t * an onCreate(), it is passed all of the arguments from methods like entity.set(). Also, components\n\t * can have an onRemove() method, which gets called when removing that component from an entity.\n\t *\n\t * @param {string}   name           - The name\n\t * @param {function} componentClass - The component class, must be a constructable class or function\n\t *\n\t * @example\n\t * world.component('myComponent', class {\n\t *     // It is highly recommended to use onCreate() over constructor(), because the component\n\t *     // will have already been added to the entity. In the constructor(), it is not safe to use\n\t *     // \"entity\" because it does not contain the current component while still in the constructor.\n\t *     onCreate(some, args) {\n\t *         this.some = some\n\t *         this.args = args\n\t *         this.entity.set('whatever') // this.entity is auto-injected, and this is safe to do here\n\t *     }\n\t * })\n\t * // entity === the new entity object\n\t * // some === 10\n\t * // args === 500\n\t * world.entity().set('myComponent', 10, 500)\n\t *\n\t * @return {string} Registered component name on success, undefined on failure\n\t */\n\tcomponent(name, componentClass) {\n\t\t// Only allow functions and classes to be components\n\t\tif (isFunction(componentClass)) {\n\t\t\tthis.components[name] = componentClass\n\t\t\treturn name\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new entity in the world\n\t *\n\t * @param {string} [name] - The prototype name to use\n\t *\n\t * @example\n\t * world.entity()\n\t *\n\t * @example\n\t * world.entity('Player')\n\t *\n\t * @return {Entity} The new entity created\n\t */\n\tentity(name) {\n\t\tlet entityId = this.idCounter++\n\t\tlet entity = new Entity(this, entityId)\n\n\t\t// Use 'name' to get prototype data (if specified)\n\t\tif (name && name in this.entityTemplates) {\n\t\t\t// Add all components from prototype\n\t\t\tlet template = this.entityTemplates[name]\n\t\t\tfor (let componentName in template) {\n\t\t\t\t// Update component with data from template\n\t\t\t\tlet newComponentData = JSON.parse(template[componentName])\n\t\t\t\tentity.update(componentName, newComponentData)\n\t\t\t}\n\t\t}\n\n\t\tthis.entities.set(entityId, entity)\n\t\treturn entity\n\t}\n\n\t/**\n\t * Sets a context object that is automatically injected into all existing and new systems.\n\t * Calling this multiple times will overwrite any previous contexts passed. One caveat is that\n\t * you can only start to use the injected context in systems starting with init(). It is not\n\t * available in the constructor.\n\t *\n\t * @param {Object} [data] - The object to use as context to pass to systems\n\t * @param {string} [key] - The top-level key to inject into systems for the context object.\n\t * If no key is specified, then all the keys inside the context object will be spread into the\n\t * top-level of the system.\n\t *\n\t * @example\n\t * const state = { app: new PIXI.Application() }\n\t * const world = new World()\n\t * world.context(state) // systems can directly use this.app\n\t * world.system(...)\n\t *\n\t * @example\n\t * world.context(state, 'state') // systems use this.state.app\n\t *\n\t * @return {Entity} The new entity created\n\t */\n\tcontext(data, key) {\n\t\tthis.contextData = data\n\t\tthis.contextKey = key\n\n\t\t// Update existing systems' context\n\t\tfor (const system of this.systems) {\n\t\t\tthis._injectContext(system)\n\t\t}\n\t}\n\n\t/**\n\t * Registers a system to the world.\n\t * The order the systems get registered, is the order then run in.\n\t *\n\t * @example\n\t * // Movement system (basic example)\n\t * class MovementSystem {\n\t *   run(dt) {\n\t *     world.each('position', 'velocity', ({ position, velocity }) => {\n\t *       position.x += velocity.x * dt\n\t *       position.y += velocity.y * dt\n\t *     })\n\t *   }\n\t * }\n\t * // Input system (advanced example)\n\t * class InputSystem {\n\t *   init(key) {\n\t *     // Have access to this.keyboard here, but not in constructor\n\t *     this.key = key\n\t *   }\n\t *   run(dt) {\n\t *     if (this.keyboard.isPressed(this.key)) {\n\t *       world.each('controlled', 'velocity', ({ velocity }, entity) => {\n\t *         // Start moving all controlled entities to the right\n\t *         velocity.x = 1\n\t *         velocity.y = 0\n\t *         // Can also use the full entity here, in this case to add a new component\n\t *         entity.set('useFuel')\n\t *       })\n\t *     }\n\t *   }\n\t * }\n\t * // Inject context (see world.context())\n\t * world.context({ keyboard: new Keyboard() })\n\t * // Register systems in order (this method)\n\t * world.system(InputSystem, 'w') // pass arguments to init/constructor\n\t * world.system(MovementSystem)\n\t * // Run systems (can get dt or frame time)\n\t * world.run(1000.0 / 60.0)\n\t *\n\t * @param {Function} systemClass - The system class to instantiate. Can contain a\n\t * constructor(), init(), run(), or any other custom methods/properties.\n\t *\n\t * @param {...Object} args - The arguments to forward to the system's constructor and init.\n\t * Note that it is recommended to use init if using context, see world.context().\n\t *\n\t * @return {number} Unique ID of the system on success or undefined on failure\n\t */\n\tsystem(systemClass, ...args) {\n\t\t// Make sure the system is valid\n\t\tif (isFunction(systemClass)) {\n\t\t\t// Create the system\n\t\t\tconst newSystem = new systemClass(...args)\n\n\t\t\t// Inject context\n\t\t\tthis._injectContext(newSystem)\n\n\t\t\t// Call init\n\t\t\tinvoke(newSystem, 'init', ...args)\n\n\t\t\t// Add the system, return its ID\n\t\t\treturn this.systems.push(newSystem) - 1\n\t\t}\n\t}\n\n\t/**\n\t * Calls run() on all systems. These methods can return true to cause an additional rerun of all systems.\n\t * Reruns will not receive the args passed into run(), as a way to identify reruns.\n\t *\n\t * @example\n\t * world.run(deltaTime)\n\t *\n\t * @example\n\t * // Example flow of method call order:\n\t * // Setup systems:\n\t * world.system(systemA)\n\t * world.system(systemB)\n\t * // During world.run():\n\t * // systemA.run()\n\t * // systemB.run()\n\t *\n\t * @param {...Object} [args] - The arguments to forward to the systems' methods\n\t */\n\trun(...args) {\n\t\tlet status = true\n\t\t// Continue rerunning while any systems return true\n\t\twhile (status) {\n\t\t\tstatus = undefined\n\t\t\tfor (const system of this.systems) {\n\t\t\t\t// Try to call the \"run\" method\n\t\t\t\tconst result = invoke(system, 'run', ...args)\n\t\t\t\tstatus = status || result\n\t\t\t}\n\n\t\t\t// Clear args after first run, so re-runs can be identified\n\t\t\targs = []\n\t\t}\n\t}\n\n\t/**\n\t * Iterate through components and entities with all of the specified component names\n\t *\n\t * @example\n\t * // Use a callback to process entities one-by-one\n\t * world.each('comp', ({ comp }) => { comp.value = 0 })\n\t *\n\t * @example\n\t * // Get an iterator for the entities\n\t * const it = world.each('comp')\n\t * for (let entity of it) {...}\n\t *\n\t * @example\n\t * // Pass multiple components, arrays, use extra entity parameter,\n\t * // and destructure components outside the query\n\t * world.each('compA', ['more', 'comps'], 'compB', ({ compA, compC }, entity) => {\n\t *   if (compC) compC.foo(compC.bar)\n\t *   compA.foo = 'bar'\n\t *   entity.remove('compB')\n\t * })\n\t *\n\t * @param {...Object} args - Can pass component names, arrays of component names, and a callback,\n\t * in any order.\n\t *\n\t * **{...string}**: The component names to match entities with. This checks if the entity\n\t * has ALL of the specified components, but does not check for additional components.\n\t *\n\t * **{Function}**: The callback to call for each matched entity. Takes (entity.data, entity).\n\t * Entity data is an object of {[componentName]: [component]}, that can be destructured with syntax\n\t * shown in the examples.\n\t *\n\t * @return {MapIterator} If no callback specified, then returns a one-time-use iterator to the entities.\n\t * Otherwise, returns the last loop iteration status, returned by the callback.\n\t */\n\teach(...args) {\n\t\t// Gather component names and a callback (if any) from args\n\t\tconst compNames = []\n\t\tlet callback\n\t\tfor (const arg of args) {\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tcompNames.push(arg)\n\t\t\t} else if (typeof arg === 'function') {\n\t\t\t\tcallback = arg\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t// Add 1-level deep arrays of strings as separate component names\n\t\t\t\tfor (const name of arg) {\n\t\t\t\t\tcompNames.push(name)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unknown argument ${arg} with type ${typeof arg} passed to world.each().`\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\t// Get indexed map of entities\n\t\tconst entities = this.index.query(...compNames)\n\n\t\tif (callback) {\n\t\t\t// Go through the map of entities\n\t\t\tlet status\n\t\t\tfor (const entity of entities) {\n\t\t\t\t// Pass component data and the main entity\n\t\t\t\tstatus = callback(entity.data, entity)\n\n\t\t\t\t// Stop the iteration when the callback returns false\n\t\t\t\tif (status === false) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn status\n\t\t}\n\t\treturn entities\n\t}\n\n\t/**\n\t * Returns an array of entities with matching components\n\t * Simplified version of each(), returns an array instead of an iterator.\n\t *\n\t * @example\n\t * const entities = world.get('player', 'sprite')\n\t *\n\t * @param {Array} componentNames - The component names to match on. See each() for how this matches.\n\t *\n\t * @return {Array} Array of entities, instead of iterator like each().\n\t */\n\tget(...componentNames) {\n\t\treturn [...this.each(componentNames)]\n\t}\n\n\t/**\n\t * Returns an entity by ID\n\t * Returns undefined if it doesn't exist\n\t *\n\t * @example\n\t * world.getEntityById(123)\n\t *\n\t * @param {number} entityId - The entity ID to lookup for the entity\n\t *\n\t * @return {Entity} Entity if found, otherwise undefined\n\t */\n\tgetEntityById(entityId) {\n\t\treturn this.entities.get(entityId)\n\t}\n\n\t/**\n\t * Registers entity prototype(s). Any existing prototype names that are the same will be overwritten\n\t *\n\t * @example\n\t * world.prototype({\n\t *     Movable: {\n\t *         position: {},\n\t *         velocity: {}\n\t *     }\n\t * })\n\t *\n\t * @param {Object} data - Object structure to register as a prototype. Should be a dictionary with the top level keys\n\t * being the prototype names. Can also be a JSON formatted string.\n\t *\n\t * @return {number} Number of prototypes added.\n\t */\n\tprototype(data) {\n\t\tlet count = 0\n\n\t\t// Convert to an object when given a string\n\t\tif (typeof data === 'string') {\n\t\t\tdata = JSON.parse(data)\n\t\t}\n\n\t\t// Data must be an object at this point\n\t\tif (typeof data === 'object') {\n\t\t\t// Iterate through prototype names\n\t\t\tfor (let protoName in data) {\n\t\t\t\tlet inputObject = data[protoName]\n\t\t\t\tlet protoObject = {}\n\t\t\t\t// Iterate through component names\n\t\t\t\tfor (let compName in inputObject) {\n\t\t\t\t\t// Store strings of each component\n\t\t\t\t\tprotoObject[compName] = JSON.stringify(\n\t\t\t\t\t\tinputObject[compName]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tthis.entityTemplates[protoName] = protoObject\n\t\t\t\t++count\n\t\t\t}\n\t\t}\n\n\t\treturn count\n\t}\n\n\t/**\n\t * Injects context into a system based on current context state\n\t * @ignore\n\t */\n\t_injectContext(system) {\n\t\tif (this.contextData && this.contextKey) {\n\t\t\t// Inject into specified key\n\t\t\tsystem[this.contextKey] = this.contextData\n\t\t} else if (this.contextData) {\n\t\t\t// Inject as keys of context\n\t\t\tfor (const key in this.contextData) {\n\t\t\t\tsystem[key] = this.contextData[key]\n\t\t\t}\n\t\t}\n\t}\n}\n\nexports.World = World\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/world.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "invoke",
    "memberof": "src/world.js",
    "static": true,
    "longname": "src/world.js~invoke",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "Entity",
    "memberof": "src/world.js",
    "static": true,
    "longname": "src/world.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "SimpleIndex",
    "memberof": "src/world.js",
    "static": true,
    "longname": "src/world.js~SimpleIndex",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "World",
    "memberof": "src/world.js",
    "static": true,
    "longname": "src/world.js~World",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/world.js",
    "importStyle": null,
    "description": "Class for world.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "     World (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#constructor",
    "access": "public",
    "description": "Constructs an instance of the world.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "SimpleIndex",
        "defaultRaw": "SimpleIndex",
        "name": "indexer",
        "description": "The indexer to use. Default is SimpleIndex. Can use MemoizedQueryIndex if better querying performance is needed, for increased component creation/removal costs."
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "systems",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#systems",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "entities",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#entities",
    "access": "public",
    "description": "Maps entity IDs to entities",
    "lineNumber": 29,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "components",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#components",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "entityTemplates",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#entityTemplates",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "idCounter",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#idCounter",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "index",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#index",
    "access": "public",
    "description": "Maps entire queries to arrays of entities",
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "contextData",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#contextData",
    "access": "public",
    "description": "Context information",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "contextKey",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#contextKey",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "clear",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#clear",
    "access": "public",
    "description": "Removes all entities from the world.\nDoes not affect registered systems, components, or prototypes.",
    "examples": [
      "world.clear()"
    ],
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "component",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#component",
    "access": "public",
    "description": "Registers a component type to the world. Components must be constructable. If the component has\nan onCreate(), it is passed all of the arguments from methods like entity.set(). Also, components\ncan have an onRemove() method, which gets called when removing that component from an entity.",
    "examples": [
      "world.component('myComponent', class {\n    // It is highly recommended to use onCreate() over constructor(), because the component\n    // will have already been added to the entity. In the constructor(), it is not safe to use\n    // \"entity\" because it does not contain the current component while still in the constructor.\n    onCreate(some, args) {\n        this.some = some\n        this.args = args\n        this.entity.set('whatever') // this.entity is auto-injected, and this is safe to do here\n    }\n})\n// entity === the new entity object\n// some === 10\n// args === 500\nworld.entity().set('myComponent', 10, 500)"
    ],
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "componentClass",
        "description": "The component class, must be a constructable class or function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Registered component name on success, undefined on failure"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "entity",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#entity",
    "access": "public",
    "description": "Creates a new entity in the world",
    "examples": [
      "world.entity()",
      "world.entity('Player')"
    ],
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "The prototype name to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "The new entity created"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "context",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#context",
    "access": "public",
    "description": "Sets a context object that is automatically injected into all existing and new systems.\nCalling this multiple times will overwrite any previous contexts passed. One caveat is that\nyou can only start to use the injected context in systems starting with init(). It is not\navailable in the constructor.",
    "examples": [
      "const state = { app: new PIXI.Application() }\nconst world = new World()\nworld.context(state) // systems can directly use this.app\nworld.system(...)",
      "world.context(state, 'state') // systems use this.state.app"
    ],
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "The object to use as context to pass to systems"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "key",
        "description": "The top-level key to inject into systems for the context object.\nIf no key is specified, then all the keys inside the context object will be spread into the\ntop-level of the system."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "The new entity created"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "system",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#system",
    "access": "public",
    "description": "Registers a system to the world.\nThe order the systems get registered, is the order then run in.",
    "examples": [
      "// Movement system (basic example)\nclass MovementSystem {\n  run(dt) {\n    world.each('position', 'velocity', ({ position, velocity }) => {\n      position.x += velocity.x * dt\n      position.y += velocity.y * dt\n    })\n  }\n}\n// Input system (advanced example)\nclass InputSystem {\n  init(key) {\n    // Have access to this.keyboard here, but not in constructor\n    this.key = key\n  }\n  run(dt) {\n    if (this.keyboard.isPressed(this.key)) {\n      world.each('controlled', 'velocity', ({ velocity }, entity) => {\n        // Start moving all controlled entities to the right\n        velocity.x = 1\n        velocity.y = 0\n        // Can also use the full entity here, in this case to add a new component\n        entity.set('useFuel')\n      })\n    }\n  }\n}\n// Inject context (see world.context())\nworld.context({ keyboard: new Keyboard() })\n// Register systems in order (this method)\nworld.system(InputSystem, 'w') // pass arguments to init/constructor\nworld.system(MovementSystem)\n// Run systems (can get dt or frame time)\nworld.run(1000.0 / 60.0)"
    ],
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "systemClass",
        "description": "The system class to instantiate. Can contain a\nconstructor(), init(), run(), or any other custom methods/properties."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The arguments to forward to the system's constructor and init.\nNote that it is recommended to use init if using context, see world.context()."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Unique ID of the system on success or undefined on failure"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "run",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#run",
    "access": "public",
    "description": "Calls run() on all systems. These methods can return true to cause an additional rerun of all systems.\nReruns will not receive the args passed into run(), as a way to identify reruns.",
    "examples": [
      "world.run(deltaTime)",
      "// Example flow of method call order:\n// Setup systems:\nworld.system(systemA)\nworld.system(systemB)\n// During world.run():\n// systemA.run()\n// systemB.run()"
    ],
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to the systems' methods"
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "each",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#each",
    "access": "public",
    "description": "Iterate through components and entities with all of the specified component names",
    "examples": [
      "// Use a callback to process entities one-by-one\nworld.each('comp', ({ comp }) => { comp.value = 0 })",
      "// Get an iterator for the entities\nconst it = world.each('comp')\nfor (let entity of it) {...}",
      "// Pass multiple components, arrays, use extra entity parameter,\n// and destructure components outside the query\nworld.each('compA', ['more', 'comps'], 'compB', ({ compA, compC }, entity) => {\n  if (compC) compC.foo(compC.bar)\n  compA.foo = 'bar'\n  entity.remove('compB')\n})"
    ],
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Can pass component names, arrays of component names, and a callback,\nin any order.\n\n**{...string}**: The component names to match entities with. This checks if the entity\nhas ALL of the specified components, but does not check for additional components.\n\n**{Function}**: The callback to call for each matched entity. Takes (entity.data, entity).\nEntity data is an object of {[componentName]: [component]}, that can be destructured with syntax\nshown in the examples."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MapIterator"
      ],
      "spread": false,
      "description": "If no callback specified, then returns a one-time-use iterator to the entities.\nOtherwise, returns the last loop iteration status, returned by the callback."
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "get",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#get",
    "access": "public",
    "description": "Returns an array of entities with matching components\nSimplified version of each(), returns an array instead of an iterator.",
    "examples": [
      "const entities = world.get('player', 'sprite')"
    ],
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "componentNames",
        "description": "The component names to match on. See each() for how this matches."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of entities, instead of iterator like each()."
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getEntityById",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#getEntityById",
    "access": "public",
    "description": "Returns an entity by ID\nReturns undefined if it doesn't exist",
    "examples": [
      "world.getEntityById(123)"
    ],
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "entityId",
        "description": "The entity ID to lookup for the entity"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "Entity if found, otherwise undefined"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "prototype",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#prototype",
    "access": "public",
    "description": "Registers entity prototype(s). Any existing prototype names that are the same will be overwritten",
    "examples": [
      "world.prototype({\n    Movable: {\n        position: {},\n        velocity: {}\n    }\n})"
    ],
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Object structure to register as a prototype. Should be a dictionary with the top level keys\nbeing the prototype names. Can also be a JSON formatted string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of prototypes added."
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "_injectContext",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#_injectContext",
    "access": "private",
    "description": "Injects context into a system based on current context state",
    "lineNumber": 426,
    "ignore": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# PicoES\n\n[![Build Status](https://travis-ci.org/ayebear/picoes.svg?branch=master)](https://travis-ci.org/ayebear/picoes)\n\n### Table Of Contents\n\n-   [About](#about)\n    -   [Features](#features)\n    -   [Terminology](#terminology)\n    -   [License](#license)\n    -   [Author](#author)\n-   [Instructions](#instructions)\n    -   [Setup](#setup)\n    -   [Documentation](#documentation)\n    -   [Examples](#examples)\n\n## About\n\nPico Entity System for JavaScript (ES6+).\n\nRead up on what an ECS is here: [https://en.wikipedia.org/wiki/Entity_component_system](https://en.wikipedia.org/wiki/Entity_component_system)\n\nThis entity system is designed to be as simple as possible, while still having useful features.\n\n### Features\n\n-   **Simple query syntax**\n    -   `world.each('a', 'b', ({a, b}) => { a.foo = b.bar })`\n\t-   See the examples below for more advanced usage, or the [reference docs](https://ayebear.com/picoes/class/src/world.js~World.html#instance-method-each)\n-   **No formal declarations required**\n    -   Can create components and entities in a world and query on them, without needing to define structured systems and components\n-   **Strings as component keys**\n    -   No need to manually define component keys, or manually include component classes to use them\n-   **Automatic dependency injection for systems**\n    -   No need to pass state to each system, can have a single context that gets injected into all systems automatically\n-   **High performance indexing options**\n    -   SimpleIndex (Default): O(1) component add/remove, O(m) query time\n        -   Where `m` is the smallest size component index\n    -   MemoizedQueryIndex: O(q) component add/remove, O(1) average query time (memoized), O(n) worst query time (initial)\n        -   Where `q` is the total number of memoized queries\n        -   And `n` is the total number of entities\n    -   _Note: Above time complexities are amortized assuming the number of components used is a known constant_\n    -   Can also write your own and pass it to the World constructor! Needs clear, add, remove, and query.\n-   **Prototypes**\n    -   Allows entity definitions to be data-driven, outside of code\n\n### Terminology\n\n-   **Component:** Holds some related data\n    -   Example: Position, Velocity, Health\n-   **Entity:** Refers to a collection of components\n    -   Example: Position + Health could represent a player\n-   **Prototype:** A template of components used for creating entities\n    -   Example: Player could contain Position, Velocity, and Health\n-   **System:** Logic loop that processes entities\n    -   Example: Movement system which handles positions and velocities\n-   **World:** Lets you register components, systems, and prototypes in a self-contained object - which avoids the use of singletons. This is also where you can create entities from.\n\n### License\n\nMIT\n\n### Author\n\nEric Hebert\n\n## Instructions\n\n### Setup\n\nYou'll normally want to install PicoES as a dev dependency, and have it transpiled into the build of your application.\n\n#### Yarn\n\n```bash\nyarn add --dev picoes\n```\n\n#### NPM\n\n```bash\nnpm i -D picoes\n```\n\n### Documentation\n\n[PicoES Documentation](https://ayebear.com/picoes)\n\n### Examples\n\n#### Shorthand anonymous components and systems\n\n```javascript\n// import { World } from 'picoes'\nconst { World } = require('picoes')\n\n// Create a world to store entities in\nconst world = new World()\n\n// Create player with anonymous health component\nconst player = world.entity().set('health', { value: 100 })\n\n// Create enemies\nworld.entity().set('damages', 10)\nworld.entity().set('damages', 30)\n\n// Apply damage\nworld.each('damages', ({ damages }) => {\n\tplayer.get('health').value -= damages\n})\n\n// Player now has reduced health\nconsole.assert(player.get('health').value === 60)\n```\n\n#### Full component and system definitions\n\n```javascript\n// const { World } = require('picoes')\nimport { World } from 'picoes'\n\n// Create a world to store entities in\nconst world = new World()\n\n// Define and register components\nclass Vec2 {\n\tconstructor(x = 0, y = 0) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n}\nworld.component('position', Vec2)\nworld.component('velocity', Vec2)\nworld.component('health', class {\n\tconstructor(start = 100) {\n\t\tthis.value = start\n\t}\n})\n\n// Example of using onCreate and onRemove\nworld.component('sprite', class {\n\tonCreate(texture) {\n\t\t// this.entity is auto-injected into registered components\n\t\t// It is not available in the constructor, but is available in onCreate\n\t\tthis.container = this.entity.get('gameContainer')\n\t\tthis.sprite = new Sprite(texture)\n\t\tthis.container.add(this.sprite)\n\t}\n\n\tonRemove() {\n\t\tthis.container.remove(this.sprite)\n\t}\n})\n\n// Define systems\n// Log statements are to show flow order below\nclass MovementSystem {\n\tinit(...args) {\n\t\t// Context is available here as well\n\t\tconsole.log('init() called with args:', ...args)\n\t}\n\n\trun(dt) {\n\t\tconsole.log(`run(${dt}) called`)\n\t\tworld.each('position', 'velocity', ({ position, velocity }, entity) => {\n\t\t\tconsole.log(`each() called for entity ${entity.id}`)\n\t\t\tposition.x += velocity.x * dt\n\t\t\tposition.y += velocity.y * dt\n\t\t})\n\t}\n}\n\n// Register systems\nworld.system(MovementSystem, 'extra', 'args')\n\n// Create entity without prototype\nconst entityA = world.entity().set('position').set('velocity')\nconsole.assert(entityA.has('position'))\nconsole.assert(entityA.has('velocity'))\n\n// Create entity with prototype (results are the same as above)\nworld.prototype({\n\tMovable: {\n\t\tposition: {},\n\t\tvelocity: {},\n\t},\n})\nconst entityB = world.entity('Movable')\nconsole.assert(entityB.has('position'))\nconsole.assert(entityB.has('velocity'))\n\n// This will re-create the component using the constructor\nentityB.set('position', 100, 100)\n\n// This set a property in the existing component\nentityA.get('position').x = 100\n\n// Set velocities by using update()\nentityA.update('velocity', { x: 10, y: 10 })\nentityB.update('velocity', { x: -10, y: -10 })\n\n// Run systems (pass one second for dt)\nworld.run(1.0)\n\n// Since the movement system ran once, the positions changed by the amount of their velocity\nconsole.assert(entityA.get('position').x === 110)\nconsole.assert(entityA.get('position').y === 10)\nconsole.assert(entityB.get('position').x === 90)\nconsole.assert(entityB.get('position').y === 90)\n```\n\nExpected output:\n\n```\ninit() called with args: extra args\nrun(1) called\neach() called for entity 1\neach() called for entity 2\n```\n",
    "longname": "/home/eric/dev/picoes/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"picoes\",\n  \"version\": \"1.0.0-alpha1\",\n  \"description\": \"Pico Entity System for JavaScript (ES6).\",\n  \"main\": \"./index.js\",\n  \"scripts\": {\n    \"test\": \"jest --coverage\",\n    \"doc\": \"node ./node_modules/.bin/esdoc\",\n    \"deploy\": \"gh-pages -d docs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ayebear/picoes.git\"\n  },\n  \"keywords\": [\n    \"entity\",\n    \"component\",\n    \"system\",\n    \"ecs\",\n    \"picoes\",\n    \"es6\"\n  ],\n  \"author\": \"Eric Hebert\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ayebear/picoes/issues\"\n  },\n  \"homepage\": \"https://github.com/ayebear/picoes#readme\",\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-undocumented-identifier-plugin\": \"^1.0.0\",\n    \"esdoc-unexported-identifier-plugin\": \"^1.0.0\",\n    \"gh-pages\": \"^2.1.1\",\n    \"jest\": \"^24.9.0\"\n  },\n  \"dependencies\": {}\n}\n",
    "longname": "/home/eric/dev/picoes/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]