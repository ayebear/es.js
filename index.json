[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/entity.js",
    "content": "/** @ignore */\nimport { invoke, shallowClone } from './utilities.js'\n\n/**\n * Entity class used for storing components.\n *\n * @class      Entity (name)\n */\nexport class Entity {\n  /**\n   * Do not construct an Entity yourself - use the entity() method in World instead.\n   * Also, do not shallow/deep copy entity objects, only pass around references.\n   *\n   * @private\n   *\n   * @param {World}  world - The world\n   * @param {number} id    - The identifier\n   */\n  constructor(world, id) {\n    /** @ignore */\n    this.world = world\n\n    /** @ignore */\n    this._id = id\n\n    /** @ignore */\n    this.data = {}\n  }\n\n  /**\n   * Return the entity ID.\n   *\n   * @return {number} Integer entity ID\n   */\n  get id() {\n    return this._id\n  }\n\n  /**\n   * ID is read-only, attempting to set it will throw an error.\n   *\n   * @private\n   *\n   * @throws {Error} Cannot set entity id\n   */\n  set id(id) {\n    throw new Error('Cannot set entity id')\n  }\n\n  /**\n   * Returns true if the entity has ALL of the specified component names.\n   * Additional components that the entity has, which are not specified in has(), will be ignored.\n   * If no component names are specified, this method returns true.\n   *\n   * @example\n   * if (entity.has('position', 'velocity')) {...}\n   *\n   * @param {...string} [components] - The component names to check for\n   *\n   * @return {boolean} true or false\n   */\n  has(...components) {\n    return components.every(name => name in this.data)\n  }\n\n  /**\n   * Returns true if the entity has ANY of the specified component names.\n   * If no component names are specified, this method returns false.\n   *\n   * @example\n   * if (entity.hasAny('position', 'velocity')) {...}\n   *\n   * @param {...string} [components] - The component names to check for\n   *\n   * @return {boolean} true or false\n   */\n  hasAny(...components) {\n    return components.some(name => name in this.data)\n  }\n\n  /**\n   * Returns a component by name, or undefined if it doesn't exist\n   *\n   * @example\n   * let position = entity.get('position')\n   *\n   * @param {string} component - The component name to get\n   *\n   * @return {Object} The component if defined, otherwise undefined\n   */\n  get(component) {\n    return this.data[component]\n  }\n\n  /**\n   * Returns a component by name (automatically created if it doesn't exist)\n   *\n   * @example\n   * let position = entity.access('position', 3, 4)\n   *\n   * @param {string}    component - The component name to create/get\n   * @param {Object}    fallback  - The value to set the component as for unregistered components\n   * @param {...Object} [args]    - The arguments to forward to create the new component, only if it doesn't exist.\n   *\n   * @return {Object} Always returns either the existing component, or the newly created one.\n   */\n  access(component, fallback, ...args) {\n    if (!this.has(component)) {\n      this.setWithFallback(component, fallback, ...args)\n    }\n    return this.data[component]\n  }\n\n  /**\n   * Adds a new component, or re-creates and overwrites an existing component\n   *\n   * @example\n   * entity.set('position', 1, 2)\n   *\n   * @example\n   * entity.set('anonymousComponent', { keys: 'values' })\n   *\n   * @example\n   * entity.set('anotherAnonymousComponent', 'Any type of any value')\n   *\n   * @param {string}    component - The component name to create. If there is a registered component for this name,\n   * then its constructor will be called with (...args) and an object of that type will be created. The parent\n   * entity reference gets injected into registered components after they are constructed. The onCreate method\n   * gets called after the component is added to the entity, and after the entity is injected. This method\n   * also gets passed the same parameters.\n   * @param {...Object} [args]    - The arguments to forward to the registered component type. If the component type is\n   * registered, then only the first additional argument will be used as the value of the entire component.\n   *\n   * @return {Object} The original entity that set() was called on, so that operations can be chained.\n   */\n  set(component, ...args) {\n    // Use first argument as fallback\n    return this.setWithFallback(component, args[0], ...args)\n  }\n\n  /**\n   * Adds a new component, or re-creates and overwrites an existing component. Has separate fallback argument.\n   *\n   * @example\n   * entity.setWithFallback('position', { x: 1, y: 2 }, 1, 2)\n   *\n   * @param {string}    component - See entity.set() for details.\n   * @param {Object}    fallback  - The object or value to use as the component when there is no registered type.\n   * @param {...Object} [args]    - See entity.set() for details.\n   *\n   * @return {Object} The original entity that setWithFallback() was called on, so that operations can be chained.\n   */\n  setWithFallback(component, fallback, ...args) {\n    if (this.valid() && component in this.world.entities.componentClasses) {\n      // Create component and store in entity\n      this.data[component] = new this.world.entities.componentClasses[\n        component\n      ](...args)\n\n      // Inject parent entity into component\n      this.data[component].entity = this\n    } else {\n      // Use fallback argument as component value\n      this.data[component] = fallback\n    }\n\n    // Update the index with this new component\n    if (this.valid()) {\n      this.world.entities.addToIndex(this, component)\n    }\n\n    // Call custom onCreate to initialize component, and any additional arguments passed into set()\n    invoke(this.data[component], 'onCreate', ...args)\n\n    return this\n  }\n\n  /**\n   * Sets a component value directly. The onCreate method is not called, and it is expected that you\n   * pass an already initialized component.\n   *\n   * @example\n   * entity.set('position', position)\n   *\n   * @param {string} component - The component name to set.\n   * @param {Object} value     - Should be a previous component instance, or whatever is expected for\n   * the component name.\n   *\n   * @return {Object} The original entity that setRaw() was called on, so that operations can be chained.\n   */\n  setRaw(component, value) {\n    // Directly set value\n    this.data[component] = value\n\n    // Update the index with this new component\n    if (this.valid()) {\n      this.world.entities.addToIndex(this, component)\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a component from the entity - has no effect when it doesn't exist.\n   * Can specify an onRemove() method in your component which gets called before it is removed.\n   * If nothing is specified, then nothing will be removed. Use removeAll() to remove all components.\n   *\n   * @example\n   * entity.remove('position')\n   *\n   * @param {...string} [components] - The component names to remove from the entity.\n   *\n   * @return {Object} The original entity that remove() was called on, so that operations can be chained.\n   */\n  remove(...components) {\n    for (let component of components) {\n      if (component in this.data) {\n        // Call custom onRemove\n        invoke(this.data[component], 'onRemove')\n\n        // Remove from index\n        if (this.valid()) {\n          this.world.entities.removeFromIndex(this, component)\n        }\n\n        // Remove from entity\n        delete this.data[component]\n      }\n    }\n    return this\n  }\n\n  // Remove all components\n\n  /**\n   * Removes all components from the entity.\n   *\n   * @example\n   * entity.removeAll()\n   *\n   * @return {Object} The original entity that removeAll() was called on, so that operations can be chained.\n   */\n  removeAll() {\n    this.remove(...this.components)\n\n    if (this.components.length > 0) {\n      throw new Error(\n        'Failed to remove all components. Components must have been added during the removeAll().'\n      )\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this entity and all of its components from the world. After an entity is destroyed, the object should be discarded,\n   * and it is recommended to avoid re-using it.\n   *\n   * @example\n   * entity.destroy()\n   */\n  destroy() {\n    this.removeAll()\n\n    if (this.valid()) {\n      // Remove from world\n      this.world.entities.entities.delete(this._id)\n      this._id = undefined\n    }\n  }\n\n  /**\n   * Returns an array of component names this entity currently has.\n   *\n   * @return {Array<String>} Array of component names.\n   */\n  get components() {\n    return Object.keys(this.data)\n  }\n\n  /**\n   * Returns true if this is a valid, existing, and usable entity, which is attached to a world.\n   *\n   * @example\n   * if (entity.valid()) {...}\n   *\n   * @return {boolean} true or false\n   */\n  valid() {\n    // Note: No need to actually look in the world for the ID, if entities are only ever copied by reference.\n    // If entities are ever deep/shallow copied, this function will need to check this to be more robust.\n    return this.world && this._id !== undefined\n  }\n\n  /**\n   * Serializes entire entity and components to JSON.\n   * Note: Defining toJSON methods in your components will override the built-in behavior.\n   *\n   * @example\n   * let serializedEntity = entity.toJSON()\n   *\n   * @return {string} JSON encoded string\n   */\n  toJSON() {\n    return JSON.stringify(this.data)\n  }\n\n  /**\n   * Deserializes data from JSON, creating new components and overwriting existing components.\n   * Note: Defining fromJSON methods in your components will override the built-in behavior.\n   *\n   * @example\n   * entity.fromJSON(serializedEntity)\n   *\n   * @param {string} data - A JSON string containing component data to parse, and store in this entity.\n   *\n   * @return {Object} The original entity that fromJSON() was called on, so that operations can be chained.\n   */\n  fromJSON(data) {\n    const parsed = JSON.parse(data)\n    for (const name in parsed) {\n      const comp = this.access(name, {})\n\n      // Either call custom method or copy all properties\n      if (typeof comp.fromJSON === 'function') {\n        comp.fromJSON(parsed[name])\n      } else {\n        Object.assign(this.access(name, {}), parsed[name])\n      }\n    }\n    return this\n  }\n\n  /**\n   * Attaches a currently detached entity back to a world.\n   * Note: Do not use detached entities, get() may be safe, but avoid calling other methods\n   * Note: The ID will be reassigned, so do not rely on this\n   *\n   * @example\n   * entity.attach(world)\n   *\n   * @param {World} world - The world to attach this entity to\n   */\n  attach(world) {\n    if (world && !this.valid()) {\n      // Assign new id, and reattach to world\n      this.world = world\n      this._id = this.world.entities.nextEntityId++\n      this.world.entities.entities.set(this._id, this)\n      this.world.entities.addToIndex(this, ...this.components)\n    }\n  }\n\n  /**\n   * Removes this entity from the current world, without removing any components or data.\n   * It can be re-attached to another world (or the same world), using the attach() method.\n   * Note: Do not use detached entities, get() may be safe, but avoid calling other methods\n   * Note: The ID will be reassigned, so do not rely on this\n   *\n   * @example\n   * entity.detach()\n   */\n  detach() {\n    if (this.valid()) {\n      // Remove from current world\n      this.world.entities.removeFromIndex(this, ...this.components)\n      this.world.entities.entities.delete(this._id)\n      this._id = undefined\n      this.world = undefined\n    }\n  }\n\n  /**\n   * Creates a copy of this entity with all of the components cloned and returns it.\n   * Individual components are either shallow or deep copied, depending on component\n   * registration status and if a clone() method is defined. See entity.cloneComponentTo().\n   *\n   * @example\n   * entity.clone()\n   */\n  clone() {\n    if (!this.valid()) {\n      throw new Error('Cannot clone detached or invalid entity.')\n    }\n\n    // Clone each component in this entity, to a new entity\n    const newEntity = this.world.entity()\n    for (const name in this.data) {\n      this.cloneComponentTo(newEntity, name)\n    }\n\n    // Return the cloned entity\n    return newEntity\n  }\n\n  /**\n   * Clones a component from this entity to the target entity.\n   *\n   * @example\n   * const source = world.entity().set('foo', 'bar')\n   * const target = world.entity()\n   * source.cloneComponentTo(target, 'foo')\n   * assert(target.get('foo') === 'bar')\n   *\n   * @example\n   * world.component('foo', class {\n   *   onCreate(bar, baz) {\n   *     this.bar = bar\n   *     this.baz = baz\n   *     this.qux = false\n   *   }\n   *   setQux(qux = true) {\n   *     this.qux = qux\n   *   }\n   *   cloneArgs() {\n   *     return [this.bar, this.baz]\n   *   }\n   *   clone(target) {\n   *     target.qux = this.qux\n   *   }\n   * })\n   * const source = world.entity()\n   *   .set('foo', 'bar', 'baz')\n   *   .set('qux', true)\n   * const target = world.entity()\n   * source.cloneComponentTo(target, 'foo')\n   * assert(source.get('foo').bar === target.get('foo').bar)\n   * assert(source.get('foo').baz === target.get('foo').baz)\n   * assert(source.get('foo').qux === target.get('foo').qux)\n   *\n   * @param {Entity} targetEntity - Must be a valid entity. Could be part of another world, but it\n   * is undefined behavior if the registered components are different types.\n   * @param {string} name         - Component name of both source and target components.\n   *\n   * @return {Object} The original entity that cloneComponentTo() was called on,\n   * so that operations can be chained.\n   */\n  cloneComponentTo(targetEntity, name) {\n    // Get component and optional arguments for cloning\n    const component = this.get(name)\n    const args = invoke(component, 'cloneArgs') || []\n\n    if (name in targetEntity.world.entities.componentClasses) {\n      // Registered component, so create new using constructor, inject\n      // entity, and call optional clone\n      const newComponent = new targetEntity.world.entities.componentClasses[\n        name\n      ](...args)\n      newComponent.entity = targetEntity\n      targetEntity.data[name] = newComponent\n      invoke(component, 'clone', newComponent)\n    } else {\n      // Unregistered component, so just shallow clone it\n      targetEntity.data[name] = shallowClone(component)\n    }\n\n    // Update the index with this new component\n    targetEntity.world.entities.addToIndex(targetEntity, name)\n\n    // Call custom onCreate to initialize component, and any additional arguments passed into set()\n    invoke(targetEntity.data[name], 'onCreate', ...args)\n\n    return this\n  }\n}\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Entity",
    "memberof": "src/entity.js",
    "static": true,
    "longname": "src/entity.js~Entity",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/entity.js",
    "importStyle": "{Entity}",
    "description": "Entity class used for storing components.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "     Entity (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#constructor",
    "access": "private",
    "description": "Do not construct an Entity yourself - use the entity() method in World instead.\nAlso, do not shallow/deep copy entity objects, only pass around references.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "world",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#world",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_id",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#_id",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "data",
    "memberof": "src/entity.js~Entity",
    "static": false,
    "longname": "src/entity.js~Entity#data",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "id",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#id",
    "access": "public",
    "description": "Return the entity ID.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Integer entity ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "set",
    "name": "id",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#id",
    "access": "private",
    "description": "ID is read-only, attempting to set it will throw an error.",
    "lineNumber": 46,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Cannot set entity id"
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "has",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#has",
    "access": "public",
    "description": "Returns true if the entity has ALL of the specified component names.\nAdditional components that the entity has, which are not specified in has(), will be ignored.\nIf no component names are specified, this method returns true.",
    "examples": [
      "if (entity.has('position', 'velocity')) {...}"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": true,
        "name": "components",
        "description": "The component names to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "hasAny",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#hasAny",
    "access": "public",
    "description": "Returns true if the entity has ANY of the specified component names.\nIf no component names are specified, this method returns false.",
    "examples": [
      "if (entity.hasAny('position', 'velocity')) {...}"
    ],
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": true,
        "name": "components",
        "description": "The component names to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "get",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#get",
    "access": "public",
    "description": "Returns a component by name, or undefined if it doesn't exist",
    "examples": [
      "let position = entity.get('position')"
    ],
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to get"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The component if defined, otherwise undefined"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "access",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#access",
    "access": "public",
    "description": "Returns a component by name (automatically created if it doesn't exist)",
    "examples": [
      "let position = entity.access('position', 3, 4)"
    ],
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to create/get"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "The value to set the component as for unregistered components"
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to create the new component, only if it doesn't exist."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Always returns either the existing component, or the newly created one."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "set",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#set",
    "access": "public",
    "description": "Adds a new component, or re-creates and overwrites an existing component",
    "examples": [
      "entity.set('position', 1, 2)",
      "entity.set('anonymousComponent', { keys: 'values' })",
      "entity.set('anotherAnonymousComponent', 'Any type of any value')"
    ],
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to create. If there is a registered component for this name,\nthen its constructor will be called with (...args) and an object of that type will be created. The parent\nentity reference gets injected into registered components after they are constructed. The onCreate method\ngets called after the component is added to the entity, and after the entity is injected. This method\nalso gets passed the same parameters."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to the registered component type. If the component type is\nregistered, then only the first additional argument will be used as the value of the entire component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that set() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setWithFallback",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#setWithFallback",
    "access": "public",
    "description": "Adds a new component, or re-creates and overwrites an existing component. Has separate fallback argument.",
    "examples": [
      "entity.setWithFallback('position', { x: 1, y: 2 }, 1, 2)"
    ],
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "See entity.set() for details."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "The object or value to use as the component when there is no registered type."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "See entity.set() for details."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that setWithFallback() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "setRaw",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#setRaw",
    "access": "public",
    "description": "Sets a component value directly. The onCreate method is not called, and it is expected that you\npass an already initialized component.",
    "examples": [
      "entity.set('position', position)"
    ],
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component name to set."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Should be a previous component instance, or whatever is expected for\nthe component name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that setRaw() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "remove",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#remove",
    "access": "public",
    "description": "Removes a component from the entity - has no effect when it doesn't exist.\nCan specify an onRemove() method in your component which gets called before it is removed.\nIf nothing is specified, then nothing will be removed. Use removeAll() to remove all components.",
    "examples": [
      "entity.remove('position')"
    ],
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": true,
        "name": "components",
        "description": "The component names to remove from the entity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that remove() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "removeAll",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#removeAll",
    "access": "public",
    "description": "Removes all components from the entity.",
    "examples": [
      "entity.removeAll()"
    ],
    "lineNumber": 243,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that removeAll() was called on, so that operations can be chained."
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#destroy",
    "access": "public",
    "description": "Remove this entity and all of its components from the world. After an entity is destroyed, the object should be discarded,\nand it is recommended to avoid re-using it.",
    "examples": [
      "entity.destroy()"
    ],
    "lineNumber": 262,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "get",
    "name": "components",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#components",
    "access": "public",
    "description": "Returns an array of component names this entity currently has.",
    "lineNumber": 277,
    "return": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": "Array of component names."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "valid",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#valid",
    "access": "public",
    "description": "Returns true if this is a valid, existing, and usable entity, which is attached to a world.",
    "examples": [
      "if (entity.valid()) {...}"
    ],
    "lineNumber": 289,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true or false"
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#toJSON",
    "access": "public",
    "description": "Serializes entire entity and components to JSON.\nNote: Defining toJSON methods in your components will override the built-in behavior.",
    "examples": [
      "let serializedEntity = entity.toJSON()"
    ],
    "lineNumber": 304,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "JSON encoded string"
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#fromJSON",
    "access": "public",
    "description": "Deserializes data from JSON, creating new components and overwriting existing components.\nNote: Defining fromJSON methods in your components will override the built-in behavior.",
    "examples": [
      "entity.fromJSON(serializedEntity)"
    ],
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A JSON string containing component data to parse, and store in this entity."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that fromJSON() was called on, so that operations can be chained."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "attach",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#attach",
    "access": "public",
    "description": "Attaches a currently detached entity back to a world.\nNote: Do not use detached entities, get() may be safe, but avoid calling other methods\nNote: The ID will be reassigned, so do not rely on this",
    "examples": [
      "entity.attach(world)"
    ],
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world to attach this entity to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "detach",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#detach",
    "access": "public",
    "description": "Removes this entity from the current world, without removing any components or data.\nIt can be re-attached to another world (or the same world), using the attach() method.\nNote: Do not use detached entities, get() may be safe, but avoid calling other methods\nNote: The ID will be reassigned, so do not rely on this",
    "examples": [
      "entity.detach()"
    ],
    "lineNumber": 363,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "clone",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#clone",
    "access": "public",
    "description": "Creates a copy of this entity with all of the components cloned and returns it.\nIndividual components are either shallow or deep copied, depending on component\nregistration status and if a clone() method is defined. See entity.cloneComponentTo().",
    "examples": [
      "entity.clone()"
    ],
    "lineNumber": 381,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "cloneComponentTo",
    "memberof": "src/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity.js~Entity#cloneComponentTo",
    "access": "public",
    "description": "Clones a component from this entity to the target entity.",
    "examples": [
      "const source = world.entity().set('foo', 'bar')\nconst target = world.entity()\nsource.cloneComponentTo(target, 'foo')\nassert(target.get('foo') === 'bar')",
      "world.component('foo', class {\n  onCreate(bar, baz) {\n    this.bar = bar\n    this.baz = baz\n    this.qux = false\n  }\n  setQux(qux = true) {\n    this.qux = qux\n  }\n  cloneArgs() {\n    return [this.bar, this.baz]\n  }\n  clone(target) {\n    target.qux = this.qux\n  }\n})\nconst source = world.entity()\n  .set('foo', 'bar', 'baz')\n  .set('qux', true)\nconst target = world.entity()\nsource.cloneComponentTo(target, 'foo')\nassert(source.get('foo').bar === target.get('foo').bar)\nassert(source.get('foo').baz === target.get('foo').baz)\nassert(source.get('foo').qux === target.get('foo').qux)"
    ],
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "targetEntity",
        "description": "Must be a valid entity. Could be part of another world, but it\nis undefined behavior if the registered components are different types."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Component name of both source and target components."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original entity that cloneComponentTo() was called on,\nso that operations can be chained."
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/entity_storage.js",
    "content": "import { Entity } from './entity.js'\nimport { invoke } from './utilities.js'\n\n/**\n * @ignore\n * Returns index of smallest element\n */\nconst minIndexReducer = (minIndex, value, index, values) =>\n  value < values[minIndex] ? index : minIndex\n\n/** @ignore */\nexport class EntityStorage {\n  constructor(world) {\n    /** @ignore */\n    this.world = world\n    /** @ignore */\n    this.componentClasses = {}\n    /** @ignore */\n    this.nextEntityId = 1\n\n    /**\n     * Maps entity IDs to entities\n     * @ignore\n     */\n    this.entities = new Map()\n\n    /**\n     * Maps component keys to entities\n     * @ignore\n     */\n    this.index = new Map()\n  }\n\n  clear() {\n    // Call onRemove on all components of all entities\n    for (const [, entity] of this.entities) {\n      for (let componentName in entity.data) {\n        // Get component, and call onRemove if it exists as a function\n        let component = entity.data[componentName]\n        invoke(component, 'onRemove')\n      }\n    }\n\n    // Clear entities\n    this.entities.clear()\n    this.index.clear()\n  }\n\n  registerComponent(name, componentClass) {\n    // Only allow functions and classes to be components\n    if (typeof componentClass !== 'function') {\n      throw new Error('Component is not a valid function or class.')\n    }\n    this.componentClasses[name] = componentClass\n  }\n\n  // Creates a new entity attached to the world\n  createEntity() {\n    const entityId = this.nextEntityId++\n    const entity = new Entity(this.world, entityId)\n    this.entities.set(entityId, entity)\n    return entity\n  }\n\n  // Forwards query args from world\n  each(...args) {\n    return this.queryIndex(this.queryArgs(...args))\n  }\n\n  // Returns an existing or new index\n  accessIndex(component) {\n    // TODO: Compare with object based approach for performance\n    return (\n      this.index.get(component) ||\n      this.index.set(component, new Map()).get(component)\n    )\n  }\n\n  // Add certain components with an entity to the index\n  addToIndex(entity, ...componentNames) {\n    for (let component of componentNames) {\n      this.accessIndex(component).set(entity.id, entity)\n    }\n  }\n\n  // Remove certain components from the index for an entity\n  removeFromIndex(entity, ...componentNames) {\n    for (let component of componentNames) {\n      this.accessIndex(component).delete(entity.id)\n    }\n  }\n\n  queryArgs(...args) {\n    // Gather component names and a callback (if any) from args\n    const result = {\n      componentNames: [],\n      callback: null,\n    }\n    for (const arg of args) {\n      if (typeof arg === 'string') {\n        result.componentNames.push(arg)\n      } else if (typeof arg === 'function') {\n        result.callback = arg\n      } else if (Array.isArray(arg)) {\n        // Add 1-level deep arrays of strings as separate component names\n        for (const name of arg) {\n          result.componentNames.push(name)\n        }\n      } else {\n        throw new Error(\n          `Unknown argument ${arg} with type ${typeof arg} passed to world.each().`\n        )\n      }\n    }\n    return result\n  }\n\n  // Uses an existing index or builds a new index, to get entities with the specified components\n  // If callback is defined, it will be called for each entity with component data, and returns undefined\n  // If callback is not defined, an array of entities will be returned\n  queryIndex({ componentNames, callback }) {\n    // Return all entities (array if no callback)\n    if (componentNames.length === 0) {\n      const iter = this.entities.values()\n      if (!callback) {\n        return [...iter]\n      }\n      for (const entity of iter) {\n        if (callback(entity.data, entity) === false) {\n          break\n        }\n      }\n      return\n    }\n\n    // Get the index name with the least number of entities\n    const minCompIndex = componentNames\n      .map(name => this.accessIndex(name).size)\n      .reduce(minIndexReducer, 0)\n    const minComp = componentNames[minCompIndex]\n\n    // Return matching entities (array if no callback)\n    const iter = this.index.get(minComp).values()\n    if (!callback) {\n      const results = []\n      for (const entity of iter) {\n        if (entity.has(...componentNames)) {\n          results.push(entity)\n        }\n      }\n      return results\n    }\n    for (const entity of iter) {\n      if (\n        entity.has(...componentNames) &&\n        callback(entity.data, entity) === false\n      ) {\n        return\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/entity_storage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "minIndexReducer",
    "memberof": "src/entity_storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/entity_storage.js~minIndexReducer",
    "access": "public",
    "export": false,
    "importPath": "picoes/src/entity_storage.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "minIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "EntityStorage",
    "memberof": "src/entity_storage.js",
    "static": true,
    "longname": "src/entity_storage.js~EntityStorage",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/entity_storage.js",
    "importStyle": "{EntityStorage}",
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "world",
    "memberof": "src/entity_storage.js~EntityStorage",
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#world",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "componentClasses",
    "memberof": "src/entity_storage.js~EntityStorage",
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#componentClasses",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "nextEntityId",
    "memberof": "src/entity_storage.js~EntityStorage",
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#nextEntityId",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "entities",
    "memberof": "src/entity_storage.js~EntityStorage",
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#entities",
    "access": "public",
    "description": "Maps entity IDs to entities",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "index",
    "memberof": "src/entity_storage.js~EntityStorage",
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#index",
    "access": "public",
    "description": "Maps component keys to entities",
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "clear",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#clear",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "registerComponent",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#registerComponent",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "createEntity",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#createEntity",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "each",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#each",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "accessIndex",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#accessIndex",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "addToIndex",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#addToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "removeFromIndex",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#removeFromIndex",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "componentNames",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "queryArgs",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#queryArgs",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "queryIndex",
    "memberof": "src/entity_storage.js~EntityStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity_storage.js~EntityStorage#queryIndex",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"componentNames\": *, \"callback\": *}"
        ],
        "defaultRaw": {
          "componentNames": null,
          "callback": null
        },
        "defaultValue": "{\"componentNames\":null,\"callback\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/system_storage.js",
    "content": "import { invoke } from './utilities.js'\n\n/** @ignore */\nexport class SystemStorage {\n  constructor() {\n    this.systems = []\n    this.context = undefined\n  }\n\n  register(systemClass, ...args) {\n    // Make sure the system is valid\n    if (typeof systemClass !== 'function') {\n      throw new Error('System is not a valid function or class.')\n    }\n    // Create and add the system with context\n    const newSystem = new systemClass(...args)\n    this._injectContext(newSystem)\n    invoke(newSystem, 'init', ...args)\n    this.systems.push(newSystem)\n  }\n\n  run(...args) {\n    let status = true\n    // Continue rerunning while any systems return true\n    while (status) {\n      status = undefined\n      for (const system of this.systems) {\n        // Try to call the \"run\" method\n        const result = invoke(system, 'run', ...args)\n        status = status || result\n      }\n      // Clear args after first run, so re-runs can be identified\n      args.length = 0\n    }\n  }\n\n  // Update existing systems' context\n  setContext(data) {\n    this.context = data\n    for (const system of this.systems) {\n      this._injectContext(system)\n    }\n  }\n\n  // Injects context into a system based on current context state\n  _injectContext(system) {\n    if (this.context) {\n      // Inject as keys of context\n      for (const key in this.context) {\n        system[key] = this.context[key]\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/system_storage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "SystemStorage",
    "memberof": "src/system_storage.js",
    "static": true,
    "longname": "src/system_storage.js~SystemStorage",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/system_storage.js",
    "importStyle": "{SystemStorage}",
    "description": null,
    "lineNumber": 4,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/system_storage.js~SystemStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "systems",
    "memberof": "src/system_storage.js~SystemStorage",
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#systems",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "context",
    "memberof": "src/system_storage.js~SystemStorage",
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#context",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "register",
    "memberof": "src/system_storage.js~SystemStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#register",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "systemClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "run",
    "memberof": "src/system_storage.js~SystemStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#run",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "setContext",
    "memberof": "src/system_storage.js~SystemStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#setContext",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_injectContext",
    "memberof": "src/system_storage.js~SystemStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system_storage.js~SystemStorage#_injectContext",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "system",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/utilities.js",
    "content": "/**\n * Utility function for invoking methods inside objects, binding \"this\" to the object.\n *\n * @ignore\n *\n * @param {Object}   object - The object\n * @param {Function} method - The method\n * @param {Array}    args   - The arguments\n *\n * @return {Object} Returns what the called method returns\n */\nexport function invoke(object, method, ...args) {\n  if (object && typeof object[method] === 'function') {\n    return object[method].call(object, ...args)\n  }\n}\n\n/**\n * Shallow clones any type of variable.\n *\n * @ignore\n */\nexport function shallowClone(val) {\n  if (Array.isArray(val)) {\n    return [...val]\n  } else if (typeof val === 'object') {\n    return { ...val }\n  }\n  return val\n}\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "invoke",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~invoke",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/utilities.js",
    "importStyle": "{invoke}",
    "description": "Utility function for invoking methods inside objects, binding \"this\" to the object.",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns what the called method returns"
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "shallowClone",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~shallowClone",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/utilities.js",
    "importStyle": "{shallowClone}",
    "description": "Shallow clones any type of variable.",
    "lineNumber": 23,
    "ignore": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/world.js",
    "content": "import { Entity } from './entity.js'\nimport { SystemStorage } from './system_storage.js'\nimport { EntityStorage } from './entity_storage.js'\n\n/**\n * Class for world.\n *\n * @class World (name)\n */\nexport class World {\n  /**\n   * Constructs an instance of the world.\n   *\n   * @param {object} [options] - The initial systems, components, and context to setup in the world.\n   * Each one is optional. See below for registering these after world construction.\n   *\n   * @example\n   * const world = new World({\n   *   components: { position, velocity },\n   *   systems: [Input, Physics, Render],\n   *   context: { state },\n   * })\n   */\n  constructor(options) {\n    /** @ignore */\n    this.systems = new SystemStorage()\n    /** @ignore */\n    this.entities = new EntityStorage(this)\n\n    // Register components, context, and systems\n    if (options) {\n      if (options.components) {\n        for (const name in options.components) {\n          this.component(name, options.components[name])\n        }\n      }\n      if (options.context) {\n        this.context(options.context)\n      }\n      if (options.systems) {\n        for (const systemClass of options.systems) {\n          this.system(systemClass)\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes all entities from the world.\n   * Does not affect any registered systems or components.\n   *\n   * @example\n   * world.clear()\n   */\n  clear() {\n    this.entities.clear()\n  }\n\n  /**\n   * Registers a component type to the world. Components must be constructable. If the component has\n   * an onCreate(), it is passed all of the arguments from methods like entity.set(). Also, components\n   * can have an onRemove() method, which gets called when removing that component from an entity.\n   *\n   * @param {string}   name           - The name\n   * @param {function} componentClass - The component class, must be a constructable class or function\n   *\n   * @example\n   * world.component('myComponent', class {\n   *     // It is highly recommended to use onCreate() over constructor(), because the component\n   *     // will have already been added to the entity. In the constructor(), it is not safe to use\n   *     // \"entity\" because it does not contain the current component while still in the constructor.\n   *     onCreate(some, args) {\n   *         this.some = some\n   *         this.args = args\n   *         this.entity.set('whatever') // this.entity is auto-injected, and this is safe to do here\n   *     }\n   * })\n   * // entity === the new entity object\n   * // some === 10\n   * // args === 500\n   * world.entity().set('myComponent', 10, 500)\n   *\n   * @return {string} Registered component name on success, undefined on failure\n   */\n  component(name, componentClass) {\n    this.entities.registerComponent(name, componentClass)\n  }\n\n  /**\n   * Creates a new entity in the world\n   *\n   * @example\n   * world.entity()\n   *\n   * @return {Entity} The new entity created\n   */\n  entity() {\n    return this.entities.createEntity()\n  }\n\n  /**\n   * Sets a context object that is automatically injected into all existing and new systems.\n   * Calling this multiple times will overwrite any previous contexts passed. One caveat is that\n   * you can only start to use the injected context in systems starting with init(). It is not\n   * available in the constructor.\n   *\n   * @param {Object} data - The object to use as context to pass to systems.\n   * All the keys inside the context object will be spread into the top-level of the system.\n   *\n   * @example\n   * const state = { app: new PIXI.Application() }\n   * const world = new World()\n   * world.context(state) // systems can directly use this.app\n   * world.system(...)\n   *\n   * @example\n   * world.context(state, 'state') // systems use this.state.app\n   *\n   * @return {Entity} The new entity created\n   */\n  context(data) {\n    this.systems.setContext(data)\n  }\n\n  /**\n   * Registers a system to the world.\n   * The order the systems get registered, is the order then run in.\n   *\n   * @example\n   * // Movement system (basic example)\n   * class MovementSystem {\n   *   run(dt) {\n   *     world.each('position', 'velocity', ({ position, velocity }) => {\n   *       position.x += velocity.x * dt\n   *       position.y += velocity.y * dt\n   *     })\n   *   }\n   * }\n   * // Input system (advanced example)\n   * class InputSystem {\n   *   init(key) {\n   *     // Have access to this.keyboard here, but not in constructor\n   *     this.key = key\n   *   }\n   *   run(dt) {\n   *     if (this.keyboard.isPressed(this.key)) {\n   *       world.each('controlled', 'velocity', ({ velocity }, entity) => {\n   *         // Start moving all controlled entities to the right\n   *         velocity.x = 1\n   *         velocity.y = 0\n   *         // Can also use the full entity here, in this case to add a new component\n   *         entity.set('useFuel')\n   *       })\n   *     }\n   *   }\n   * }\n   * // Inject context (see world.context())\n   * world.context({ keyboard: new Keyboard() })\n   * // Register systems in order (this method)\n   * world.system(InputSystem, 'w') // pass arguments to init/constructor\n   * world.system(MovementSystem)\n   * // Run systems (can get dt or frame time)\n   * world.run(1000.0 / 60.0)\n   *\n   * @param {Function} systemClass - The system class to instantiate. Can contain a\n   * constructor(), init(), run(), or any other custom methods/properties.\n   *\n   * @param {...Object} [args] - The arguments to forward to the system's constructor and init.\n   * Note that it is recommended to use init if using context, see world.context().\n   */\n  system(systemClass, ...args) {\n    // TODO: Get rid of args because of context\n    this.systems.register(systemClass, ...args)\n  }\n\n  /**\n   * Calls run() on all systems. These methods can return true to cause an additional rerun of all systems.\n   * Reruns will not receive the args passed into run(), as a way to identify reruns.\n   *\n   * @example\n   * world.run(deltaTime)\n   *\n   * @example\n   * // Example flow of method call order:\n   * // Setup systems:\n   * world.system(systemA)\n   * world.system(systemB)\n   * // During world.run():\n   * // systemA.run()\n   * // systemB.run()\n   *\n   * @param {...Object} [args] - The arguments to forward to the systems' methods\n   */\n  run(...args) {\n    this.systems.run(...args)\n  }\n\n  /**\n   * Iterate through components and entities with all of the specified component names\n   *\n   * @example\n   * // Use a callback to process entities one-by-one\n   * world.each('comp', ({ comp }) => { comp.value = 0 })\n   *\n   * @example\n   * // Get an iterator for the entities\n   * const it = world.each('comp')\n   * for (let entity of it) {...}\n   *\n   * @example\n   * // Pass multiple components, arrays, use extra entity parameter,\n   * // and destructure components outside the query\n   * world.each('compA', ['more', 'comps'], 'compB', ({ compA, compC }, entity) => {\n   *   if (compC) compC.foo(compC.bar)\n   *   compA.foo = 'bar'\n   *   entity.remove('compB')\n   * })\n   *\n   * @param {...Object} args - Can pass component names, arrays of component names, and a callback,\n   * in any order.\n   *\n   * **{...string}**: The component names to match entities with. This checks if the entity\n   * has ALL of the specified components, but does not check for additional components.\n   *\n   * **{Function}**: The callback to call for each matched entity. Takes (entity.data, entity).\n   * Entity data is an object of {[componentName]: [component]}, that can be destructured with syntax\n   * shown in the examples.\n   *\n   * @return {MapIterator} If no callback specified, then returns a one-time-use iterator to the entities.\n   * Otherwise, returns the last loop iteration status, returned by the callback.\n   */\n  each(...args) {\n    return this.entities.each(...args)\n  }\n}\n",
    "static": true,
    "longname": "/home/eric/dev/picoes/src/world.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "World",
    "memberof": "src/world.js",
    "static": true,
    "longname": "src/world.js~World",
    "access": "public",
    "export": true,
    "importPath": "picoes/src/world.js",
    "importStyle": "{World}",
    "description": "Class for world.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "World (name)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#constructor",
    "access": "public",
    "description": "Constructs an instance of the world.",
    "examples": [
      "const world = new World({\n  components: { position, velocity },\n  systems: [Input, Physics, Render],\n  context: { state },\n})"
    ],
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The initial systems, components, and context to setup in the world.\nEach one is optional. See below for registering these after world construction."
      }
    ]
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "systems",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#systems",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "entities",
    "memberof": "src/world.js~World",
    "static": false,
    "longname": "src/world.js~World#entities",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "clear",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#clear",
    "access": "public",
    "description": "Removes all entities from the world.\nDoes not affect any registered systems or components.",
    "examples": [
      "world.clear()"
    ],
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "component",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#component",
    "access": "public",
    "description": "Registers a component type to the world. Components must be constructable. If the component has\nan onCreate(), it is passed all of the arguments from methods like entity.set(). Also, components\ncan have an onRemove() method, which gets called when removing that component from an entity.",
    "examples": [
      "world.component('myComponent', class {\n    // It is highly recommended to use onCreate() over constructor(), because the component\n    // will have already been added to the entity. In the constructor(), it is not safe to use\n    // \"entity\" because it does not contain the current component while still in the constructor.\n    onCreate(some, args) {\n        this.some = some\n        this.args = args\n        this.entity.set('whatever') // this.entity is auto-injected, and this is safe to do here\n    }\n})\n// entity === the new entity object\n// some === 10\n// args === 500\nworld.entity().set('myComponent', 10, 500)"
    ],
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "componentClass",
        "description": "The component class, must be a constructable class or function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Registered component name on success, undefined on failure"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "entity",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#entity",
    "access": "public",
    "description": "Creates a new entity in the world",
    "examples": [
      "world.entity()"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "The new entity created"
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "context",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#context",
    "access": "public",
    "description": "Sets a context object that is automatically injected into all existing and new systems.\nCalling this multiple times will overwrite any previous contexts passed. One caveat is that\nyou can only start to use the injected context in systems starting with init(). It is not\navailable in the constructor.",
    "examples": [
      "const state = { app: new PIXI.Application() }\nconst world = new World()\nworld.context(state) // systems can directly use this.app\nworld.system(...)",
      "world.context(state, 'state') // systems use this.state.app"
    ],
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The object to use as context to pass to systems.\nAll the keys inside the context object will be spread into the top-level of the system."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "The new entity created"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "system",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#system",
    "access": "public",
    "description": "Registers a system to the world.\nThe order the systems get registered, is the order then run in.",
    "examples": [
      "// Movement system (basic example)\nclass MovementSystem {\n  run(dt) {\n    world.each('position', 'velocity', ({ position, velocity }) => {\n      position.x += velocity.x * dt\n      position.y += velocity.y * dt\n    })\n  }\n}\n// Input system (advanced example)\nclass InputSystem {\n  init(key) {\n    // Have access to this.keyboard here, but not in constructor\n    this.key = key\n  }\n  run(dt) {\n    if (this.keyboard.isPressed(this.key)) {\n      world.each('controlled', 'velocity', ({ velocity }, entity) => {\n        // Start moving all controlled entities to the right\n        velocity.x = 1\n        velocity.y = 0\n        // Can also use the full entity here, in this case to add a new component\n        entity.set('useFuel')\n      })\n    }\n  }\n}\n// Inject context (see world.context())\nworld.context({ keyboard: new Keyboard() })\n// Register systems in order (this method)\nworld.system(InputSystem, 'w') // pass arguments to init/constructor\nworld.system(MovementSystem)\n// Run systems (can get dt or frame time)\nworld.run(1000.0 / 60.0)"
    ],
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "systemClass",
        "description": "The system class to instantiate. Can contain a\nconstructor(), init(), run(), or any other custom methods/properties."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to the system's constructor and init.\nNote that it is recommended to use init if using context, see world.context()."
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "run",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#run",
    "access": "public",
    "description": "Calls run() on all systems. These methods can return true to cause an additional rerun of all systems.\nReruns will not receive the args passed into run(), as a way to identify reruns.",
    "examples": [
      "world.run(deltaTime)",
      "// Example flow of method call order:\n// Setup systems:\nworld.system(systemA)\nworld.system(systemB)\n// During world.run():\n// systemA.run()\n// systemB.run()"
    ],
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": true,
        "name": "args",
        "description": "The arguments to forward to the systems' methods"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "each",
    "memberof": "src/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/world.js~World#each",
    "access": "public",
    "description": "Iterate through components and entities with all of the specified component names",
    "examples": [
      "// Use a callback to process entities one-by-one\nworld.each('comp', ({ comp }) => { comp.value = 0 })",
      "// Get an iterator for the entities\nconst it = world.each('comp')\nfor (let entity of it) {...}",
      "// Pass multiple components, arrays, use extra entity parameter,\n// and destructure components outside the query\nworld.each('compA', ['more', 'comps'], 'compB', ({ compA, compC }, entity) => {\n  if (compC) compC.foo(compC.bar)\n  compA.foo = 'bar'\n  entity.remove('compB')\n})"
    ],
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Can pass component names, arrays of component names, and a callback,\nin any order.\n\n**{...string}**: The component names to match entities with. This checks if the entity\nhas ALL of the specified components, but does not check for additional components.\n\n**{Function}**: The callback to call for each matched entity. Takes (entity.data, entity).\nEntity data is an object of {[componentName]: [component]}, that can be destructured with syntax\nshown in the examples."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MapIterator"
      ],
      "spread": false,
      "description": "If no callback specified, then returns a one-time-use iterator to the entities.\nOtherwise, returns the last loop iteration status, returned by the callback."
    }
  },
  {
    "kind": "index",
    "content": "# PicoES\n\n[![Build Status](https://travis-ci.org/ayebear/picoes.svg?branch=master)](https://travis-ci.org/ayebear/picoes)\n\n### Table Of Contents\n\n- [About](#about)\n  - [Features](#features)\n  - [Terminology](#terminology)\n  - [License](#license)\n  - [Author](#author)\n- [Instructions](#instructions)\n  - [Setup](#setup)\n  - [Documentation](#documentation)\n  - [Examples](#examples)\n\n## About\n\nPico Entity System for JavaScript (ES6+).\n\nRead up on what an ECS is here: [https://en.wikipedia.org/wiki/Entity_component_system](https://en.wikipedia.org/wiki/Entity_component_system)\n\nThis entity system is designed to be as simple as possible, while still having useful features.\n\n### Features\n\n- **Simple query syntax**\n  - `world.each('a', 'b', ({a, b}) => { a.foo = b.bar })`\n  - See the examples below for more advanced usage, or the [reference docs](https://ayebear.com/picoes/class/src/world.js~World.html#instance-method-each)\n- **No formal declarations required**\n  - Can create **unlimited** (within memory limits) components and entities in a world and query on them, without needing to define structured systems and components\n- **Strings as component keys**\n  - No need to manually define component keys, or manually include component classes to use them\n- **Automatic dependency injection for systems**\n  - No need to pass state to each system, can have a single context that gets injected into all systems automatically\n- **Balanced performance**\n  - See [ECS benchmark comparison](https://github.com/noctjs/ecs-benchmark)\n  - Entity/Component adding/removing performance is decent with PicoES, which is important for many games.\n  - Active research and work is being done to significantly improve PicoES performance as much as possible without making it harder to use.\n\n### Terminology\n\n- **Component:** Holds some related data\n  - Example: Position, Velocity, Health\n- **Entity:** Refers to a collection of components\n  - Example: Position + Health could represent a player\n- **System:** Logic loop that processes entities\n  - Example: Movement system which handles positions and velocities\n- **World:** The entry point of all PicoES features. Can register components/systems and create/query entities in a self-contained object - which avoids the use of singletons.\n\n### License\n\nMIT\n\n### Author\n\nEric Hebert\n\n## Instructions\n\n### Setup\n\nYou'll normally want to install PicoES as a dev dependency, and have it transpiled into the build of your application.\n\n#### Yarn\n\n```bash\nyarn add --dev picoes\n```\n\n#### NPM\n\n```bash\nnpm i -D picoes\n```\n\n### Documentation\n\nThe full reference documentation can be found here:\n\n[PicoES Documentation](https://ayebear.com/picoes)\n\n### Examples\n\n#### Shorthand anonymous components and systems\n\n```javascript\nimport { World } from 'picoes'\n\n// Create a world to store entities in\nconst world = new World()\n\n// Create a player entity with health component\nconst player = world.entity().set('health', { value: 100 })\n\n// Create enemies\nworld.entity().set('damages', 10)\nworld.entity().set('damages', 30)\n\n// Apply damage to player from enemies\nworld.each('damages', ({ damages }) => {\n  player.get('health').value -= damages\n})\n\n// Player now has reduced health\nconsole.assert(player.get('health').value === 60)\n```\n\nMore complete examples coming with final 1.0.0 release! For now, refer to the [full documentation](https://ayebear.com/picoes).\n",
    "longname": "/home/eric/dev/picoes/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"picoes\",\n  \"version\": \"1.0.0-alpha7\",\n  \"description\": \"Pico Entity System for JavaScript\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"src\",\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --coverage\",\n    \"doc\": \"node --experimental-vm-modules ./node_modules/.bin/esdoc\",\n    \"deploy\": \"gh-pages -d docs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ayebear/picoes.git\"\n  },\n  \"keywords\": [\n    \"entity\",\n    \"component\",\n    \"system\",\n    \"ecs\",\n    \"picoes\"\n  ],\n  \"author\": \"Eric Hebert\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ayebear/picoes/issues\"\n  },\n  \"homepage\": \"https://github.com/ayebear/picoes#readme\",\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-undocumented-identifier-plugin\": \"^1.0.0\",\n    \"esdoc-unexported-identifier-plugin\": \"^1.0.0\",\n    \"gh-pages\": \"^3.1.0\",\n    \"husky\": \"^6.0.0\",\n    \"jest\": \"^26.6.3\",\n    \"prettier\": \"2.2.1\",\n    \"pretty-quick\": \"^3.1.0\"\n  },\n  \"dependencies\": {},\n  \"type\": \"module\",\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"pretty-quick --staged\"\n    }\n  }\n}\n",
    "longname": "/home/eric/dev/picoes/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]